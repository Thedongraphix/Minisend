// BACKUP OF ORIGINAL VULNERABLE ENDPOINT - DO NOT USE IN PRODUCTION
import { NextRequest, NextResponse } from 'next/server';
import { fixPaycrestOrdersAccountNames } from '@/lib/utils/accountNameExtractor';
import { redactOrdersArray, getSecurityHeaders } from '@/lib/security/dataRedaction';

const PAYCREST_API_URL = process.env.PAYCREST_BASE_URL || 'https://api.paycrest.io/v1';
const PAYCREST_API_KEY = process.env.PAYCREST_API_KEY;

export async function GET(request: NextRequest) {
  try {
    // Security: This endpoint now requires authentication via middleware
    console.log('üîê Authenticated request to orders endpoint');
    
    if (!PAYCREST_API_KEY) {
      return NextResponse.json(
        { error: 'PayCrest API key not configured' },
        { status: 500, headers: getSecurityHeaders() }
      );
    }

    const { searchParams } = new URL(request.url);
    const network = searchParams.get('network');
    const token = searchParams.get('token'); 
    const status = searchParams.get('status');
    const page = searchParams.get('page');
    const pageSize = searchParams.get('pageSize');
    
    // Security: Limit page size to prevent bulk data extraction
    const limitedPageSize = pageSize ? Math.min(parseInt(pageSize), 50).toString() : '20';
    
    // Build query params
    const params = new URLSearchParams();
    if (network) params.append('network', network);
    if (token) params.append('token', token);
    if (status) params.append('status', status);
    if (page) params.append('page', page);
    params.append('pageSize', limitedPageSize);
    
    const queryString = params.toString();
    const url = `${PAYCREST_API_URL}/sender/orders${queryString ? `?${queryString}` : ''}`;
    
    console.log('üîç Fetching orders from:', url);
    
    const response = await fetch(url, {
      headers: {
        'API-Key': PAYCREST_API_KEY!,
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('PayCrest API error:', response.status, errorText);
      return NextResponse.json(
        { error: `PayCrest API error: ${response.status} - ${errorText}` },
        { status: response.status }
      );
    }

    const data = await response.json();
    console.log('üìä Orders response:', data);

    // Fix account names in orders (PayCrest returns "OK" instead of actual names)
    const fixedData = {
      ...data,
      data: {
        ...data.data,
        orders: data.data?.orders ? fixPaycrestOrdersAccountNames(data.data.orders) : data.data?.orders
      }
    };

    // Security: Redact sensitive data in response
    const securedData = {
      ...fixedData,
      data: {
        ...fixedData.data,
        orders: fixedData.data?.orders ? redactOrdersArray(fixedData.data.orders) : fixedData.data?.orders
      }
    };

    console.log('üîí Data redacted for security');

    return NextResponse.json({
      success: true,
      ...securedData
    }, { headers: getSecurityHeaders() });

  } catch (error) {
    console.error('Error fetching orders:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to fetch orders' },
      { status: 500, headers: getSecurityHeaders() }
    );
  }
}